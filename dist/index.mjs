var y=Object.defineProperty;var o=(i,t)=>y(i,"name",{value:t,configurable:!0});import a from"node:fs/promises";import c from"node:path";import g from"node:fs";import w from"node:os";typeof Symbol.asyncDispose!="symbol"&&Object.defineProperty(Symbol,"asyncDispose",{configurable:!1,enumerable:!1,writable:!1,value:Symbol.for("asyncDispose")});class b{static{o(this,"FsFixture")}path;cleanUp=!0;constructor(t){this.path=t}getPath(...t){return c.join(this.path,...t)}exists(t=""){return a.access(this.getPath(t)).then(()=>!0,()=>!1)}rm(t=""){return a.rm(this.getPath(t),{recursive:!0,force:!0})}cp(t,r,s){return a.cp(t,this.getPath(r),s)}writeFile(t,r){return a.writeFile(this.getPath(t),r)}writeJson(t,r){return this.writeFile(t,JSON.stringify(r,null,2))}readFile(t,r){return a.readFile(this.getPath(t),r)}debug(){console.log(`Fixture path: ${this.path}`),this.cleanUp=!1}async[Symbol.asyncDispose](){this.cleanUp&&await this.rm()}}const d=g.realpathSync(w.tmpdir()),F=`fs-fixture-${Date.now()}-${process.pid}`;let u=0;const P=o(()=>(u+=1,u),"getId");class h{static{o(this,"Symlink")}target;type;path;constructor(t,r){this.target=t,this.type=r}}const f=o((i,t,r)=>{const s=[];for(const p in i){if(!Object.hasOwn(i,p))continue;const e=c.join(t,p);let n=i[p];if(typeof n=="function"){const m=Object.assign(Object.create(r),{filePath:e}),l=n(m);if(l instanceof h){l.path=e,s.push(l);continue}else n=l}typeof n=="string"?s.push({path:e,content:n}):s.push(...f(n,e,r))}return s},"flattenFileTree"),j=o(async(i,t)=>{const r=t?.tempDir?c.resolve(t.tempDir):d,s=c.join(r,`${F}-${P()}/`);if(await a.mkdir(s,{recursive:!0}),i){if(typeof i=="string")await a.cp(i,s,{recursive:!0,filter:t?.templateFilter});else if(typeof i=="object"){const p={fixturePath:s,getPath:o((...e)=>c.join(s,...e),"getPath"),symlink:o((e,n)=>new h(e,n),"symlink")};await Promise.all(f(i,s,p).map(async e=>{await a.mkdir(c.dirname(e.path),{recursive:!0}),e instanceof h?await a.symlink(e.target,e.path,e.type):await a.writeFile(e.path,e.content)}))}}return new b(s)},"createFixture");export{j as createFixture};
